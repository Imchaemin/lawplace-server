generator client {
  provider = "prisma-client-js"
  output   = "./clients/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum MembershipRole {
  USER_LV0 // Guest, 멤버십 만료 등. 계정은 있지만 권한은 없는 유저
  USER_LV1 // 멤버십 활성화 유저. Lounge 멤버십 유저
  USER_LV2 // 멤버십 활성화 유저. Private Office 멤버십 유저
}

enum CompanyRole {
  COMPANY_ADMIN // 회사 관리자. 사원 추가 삭제, 충전 등 결제시스템 처리
  COMPANY_LV0 // 퇴사자, 멤버십 만료 등. 계정은 있지만 권한은 없는 유저
  COMPANY_LV1 // 회사 직원
}

enum CompanyInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CreditTransactionType {
  CHARGE // 충전
  SPEND // 사용
  REFUND // 환불
}

enum TermsAndConditionsType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  MARKETING_POLICY
  PUSH_NOTIFICATION
}

model User {
  id String @id @default(uuid())

  role UserRole @default(USER)

  email        String  @unique
  refreshToken String?

  name     String?
  phone    String?
  provider String?

  membershipId String?         @unique
  membership   UserMembership? @relation(fields: [membershipId], references: [id])

  companyId   String?
  company     Company?     @relation(fields: [companyId], references: [id])
  companyRole CompanyRole? @default(COMPANY_LV0)

  creditId String?
  credit   Credit? @relation(fields: [creditId], references: [id])

  meetingRoomReservations MeetingRoomReservation[]
  invitations             Invitation[]
  creditTransactions      CreditTransaction[]

  termsAndConditionsAcceptance TermsAndConditionsAcceptance[]
  termsAndConditionsAccepted   Boolean                        @default(false)

  notificationReads NotificationRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Company {
  id String @id @default(uuid())

  credit Credit?

  name      String?
  employees User[]

  membershipId String?            @unique
  membership   CompanyMembership? @relation(fields: [membershipId], references: [id])

  companyInvitations CompanyInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CompanyInvitation {
  id String @id @default(uuid())

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  userName  String
  userEmail String
  userPhone String?

  membershipRole MembershipRole @default(USER_LV1)
  companyRole    CompanyRole    @default(COMPANY_LV1)

  status  CompanyInvitationStatus @default(PENDING)
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserMembership {
  id String @id @default(uuid())

  name String?
  role MembershipRole @default(USER_LV0)

  startAt DateTime
  endAt   DateTime

  user User?

  officeId String
  office   Office @relation(fields: [officeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CompanyMembership {
  id String @id @default(uuid())

  name String
  role MembershipRole @default(USER_LV0)

  startAt DateTime
  endAt   DateTime

  company Company?

  officeId String
  office   Office @relation(fields: [officeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Office {
  id String @id @default(uuid())

  name        String
  description String?

  address String

  userMembership    UserMembership[]
  companyMembership CompanyMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Credit {
  id String @id @default(uuid())

  users User[]

  companyId String?  @unique
  company   Company? @relation(fields: [companyId], references: [id])

  defaultCredit Decimal @default(0.0) @db.Decimal(10, 2)
  currentCredit Decimal @default(0.0) @db.Decimal(10, 2)

  lastRenewalAt DateTime  @default(now()) // 정산 날짜.
  nextRenewalAt DateTime? // 다음 정산 날짜. null인 경우 멤버십 종료 시점.

  creditTransactions CreditTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CreditTransaction {
  id String @id @default(uuid())

  creditId String
  credit   Credit @relation(fields: [creditId], references: [id])

  name        String
  description String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  type   CreditTransactionType
  amount Decimal               @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MeetingRoom {
  id String @id @default(uuid())

  name        String
  description String?
  address     String?
  image       String?

  facilities String[]

  active Boolean @default(true)

  capacity Int     @default(4)
  credit   Decimal @default(0.0) @db.Decimal(10, 2) // reservation interval당 credit

  enablePeakTime  Boolean   @default(false)
  peakTimeCredit  Decimal   @default(0.0) @db.Decimal(10, 2) // 피크타임 credit
  peakTimeStartAt DateTime? // utc
  peakTimeEndAt   DateTime? // utc

  reservationInterval Int @default(30) // 최소 예약 시간 (분)

  meetingRoomReservations MeetingRoomReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MeetingRoomReservation {
  id String @id @default(uuid())

  meetingRoom   MeetingRoom? @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  startAt DateTime
  endAt   DateTime

  totalCredit Decimal @default(0.0) @db.Decimal(10, 2) // reservation interval당 credit

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Invitation {
  id String @id @default(uuid())

  inviterId String
  inviter   User   @relation(fields: [inviterId], references: [id])

  visitorName  String
  visitorEmail String?
  visitorPhone String?
  visitorCode  String?

  visitStartAt DateTime
  visitEndAt   DateTime

  purpose String?
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notice {
  id String @id @default(uuid())

  title String

  url     String?
  content String?
  html    String?
  image   String?

  metadata Json?

  noticeCategoryId String?
  noticeCategory   NoticeCategory? @relation(fields: [noticeCategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NoticeCategory {
  id String @id @default(uuid())

  name    String
  notices Notice[]
}

model Notification {
  id String @id @default(uuid())

  title    String
  content  String?
  link     String?
  metadata Json?

  notificationCategoryId String?
  notificationCategory   NotificationCategory? @relation(fields: [notificationCategoryId], references: [id])

  target String?

  notificationReads NotificationRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NotificationCategory {
  id String @id @default(uuid())

  name          String
  icon          String?
  notifications Notification[]
}

model NotificationRead {
  id String @id @default(uuid())

  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  read Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, notificationId])
}

model TermsAndConditions {
  id String @id @default(uuid())

  type     TermsAndConditionsType
  required Boolean                @default(true)

  acceptance TermsAndConditionsAcceptance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TermsAndConditionsAcceptance {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  termsAndConditionsId String
  termsAndConditions   TermsAndConditions @relation(fields: [termsAndConditionsId], references: [id])

  accepted   Boolean   @default(false)
  acceptedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, termsAndConditionsId])
}
